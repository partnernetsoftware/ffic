#########################################################################

var( caar lambda(a() car( car( a))))
var( cadr lambda(a() car( cdr( a))))
var( cdar lambda(a() cdr( car( a))))
var( cddr lambda(a() cdr( cdr( a))))
var( cadar lambda(a() car( cdr( car( a)))))
var( caddr lambda(a() car( cdr( cdr( a)))))
var( cdddr lambda(a() cdr( cdr( cdr( a)))))
var( cdadr lambda(a() cdr( car( cdr( a)))))
var( cadddr lambda(a() car( cdr( cdr( cdr( a))))))

#########################################################################
#var( notcmp lambda(a(b)) if( cmp( a b) false true)))
#var( gteq lambda( a b) if( lt( a b) false true)))
#var( lteq lambda( a b) if( gt( a b) false true)))
var( notcmp( a b) if( cmp( a b) false true))
var( gteq( a b) if( lt( a b) false true))
var( lteq( a b) if( gt( a b) false true))
var( ge gteq)
var( le lteq)
var( nc notcmp)

## Return the maximum value from a list of integers
#var( max( list_of_numbers)
#  var( max_iter( best remaining)
#    cond( (is_nil( remaining) best)
#      (gt( car( remaining) best) max_iter( car( remaining) cdr( remaining)))
#      else( max_iter( best cdr( remaining)))
#			))
#  max_iter( car( list_of_numbers) cdr( list_of_numbers)))

## Return the minimum value from a list of integers
#var( min( list_of_numbers)
#  var( min_iter( best remaining)
#    cond( (is_nil( remaining) best)
#      (lt( car( remaining) best) min_iter( car( remaining) cdr( remaining)))
#      else( min_iter( best cdr( remaining)))
#			))
#  min_iter( car( list_of_numbers) cdr( list_of_numbers)))

# Map a function f onto list a
#var( map lambda( f( a)
#    if( is_nil( a) 
#      ^()
#      cons( f( car( a)) map( f cdr( a))))))

## Provide the association pair of key from list
#var( assoc( key list)
#  if( is_nil( list)
#    ^()
#    if( eq( key car( car( list))) 
#      car( list)
#      assoc( key cdr( list)))))
#
## Lambda key_list with dispatch
#var( make_key_list()
#  let( (list( ^())) 
#    var( get_val lambda( var() 
#        assoc( var list)))
#    var( add_key lambda( var( val)
#        set( list cons( cons( var val) list))))
#    var( dispatch( m)
#      if( eq( m ^add) add_key
#        if( eq( m ^get) get_val 
#          list)))
#    dispatch))

# Lambda stack with dispatch
#var( make_stack()
#  let( (stack( ^()))
#    var( push lambda( x() 
#        set( stack cons( x stack))
#        stack))
#    var( pop lambda( x()
#        var( q car( stack))
#        set( stack cdr( stack))
#        q))
#    var( dispatch( m)
#      if( eq( m ^push) push
#        if( eq( m ^pop) pop 
#          stack)))
#    dispatch))
# Returns the last item in a list or pair.
# Pointer to cdr if list, Pointer to object if pair
var( last_item_in_list lambda( list()
    var( helper( remaining)
      if( is_nil( cdr( remaining))
        remaining
        helper( cdr( remaining))))
    helper( list)))

#var(range_from(start,finish),if(cmp(start,finish),cons(finish,nil),cons(start,range_from(add(1,start),finish))))
var(range_from(start,finish),if(cmp(start,finish),finish,cons(start,range_from(add(1,start),finish))))

#var(range(number),var(range_helper(start,max),if(cmp(start,max),max,cons(start,range_helper(add(1,start),max)))),range_helper(0,number))
var(range(n),range_from(0,n))

# Tail recursive length
var( length( list)
  var( length_helper( accum remaining)
    if( is_nil( remaining)
      accum
      length_helper( add( 1 accum) cdr( remaining))))
  length_helper( 1 cdr( list)))

# Append list2 to list1
var( append lambda( list1( list2) 
    var( append_helper( l1 l2)
      if( is_nil( l1)
        l2
        cons( car( l1) append_helper( cdr( l1) l2))))
    append_helper( list1 list2)))

# Reverse list
#	var(reverse(_list)
#			var(reverse_iter(remaining,first) 
#				if(is_nil( remaining)
#					print("first=",first),
#					reverse_iter(cdr(remaining),cons(car(remaining),first)))
#				)
#			print("_list=",_list);
#			reverse_iter(_list ^()))
var( reverse( _list)
		var(reverse_iter(remaining,first),
#			print("remaining=>",remaining,"first=>",first)
			if( is_nil( remaining)
				first 
				reverse_iter(cdr(remaining),cons(car(remaining),first))
				) #if
			) #var
		#reverse_iter(_list ^())
		reverse_iter(_list nil)
	 )
var( pow( num exp) 
  var( iter( a b) 
    if( eq( b 1) 
      a
      iter( mul( a num) sub( b 1))))
  if( eq( exp 0)
    1
    iter( num exp)))

var( mod( a b)
  var( iter( rem div)
    if( lt( rem div)
      rem
      iter( sub( rem div) div)))
  iter( a b))

# macros
var( procedure_body lambda( proc() caddr( proc)))
var( procedure_args lambda( proc() cadr( proc)))
var( mutate_procedure_env( name new_env) setcar( cdddr( name) new_env))
var( mutate_procedure_body( name new_body) setcar( cddr( name) list( new_body)))
var( mutate_procedure_args( name new_args) setcar( cdr( name) new_args))

var( construct_procedure( args body env)
  let( (new_proc( cons( procedure cons( ^() cons( ^() cons( ^()))))))
    mutate_procedure_args( new_proc args)
    mutate_procedure_body( new_proc body)
    mutate_procedure_env( new_proc env)
    new_proc))

var( if_zero( x then) list( if list( eq x 0) then))

var( gen_accum( number)
  lambda( amount()
    set( number add( number amount))
    number))

# Everytime new_accum() is called, it's accumulator should be increased by one
var( new_accum gen_accum( 0))

# Simple for loop
var( for lambda( start( end do)
    var( for_loop( a z)
      if( cmp( a z)
        ^Done;; Last iteration
        begin( 
          do()
          for_loop( add( 1 a) z))))
    for_loop( start end do)))

var( make_withdraw( balance)
  lambda( amount()
    if( gt( balance amount)
      begin( set( balance sub( balance amount))
        balance)
      "Insufficient funds")))


