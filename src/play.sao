#load("helper.sao")

global()

"English \"String\""
"English String"
"中文字串"
print("English String")
print("中文字串")

## @(assert(r),@?(r,print(r),exit("ko")))
assert(@T)

# logic version (slow)
@(fb(n),@?(lt(n,3),1,@+(fb(@-(n,1)),fb(@-(n,2)))))
assert(@==(55,fb(10)))

# tail version O(n)
# @(fbi(a,b,count),@?(@==(count,0),b,fbi(@+(a,b),a,@-(count,1))))
# #var(fib(n),fbi(1,0,n))
# @(fib(n),fbi(1,0,n))
# fib(50)
# assert(@==(12586269025,fib(50)))


@(fbf(n), @(fbi(a,b,count),@?(@==(count,0),b,fbi(@+(a,b),a,@-(count,1)))), fbi(1,0,n))
fbf(50)
assert(@==(12586269025,fbf(50)))
assert(@==(3736710778780434371,fbf(100)))

^()      # @^(nil()) => nil()
@^()     # @^(nil) => nil
^(@@)    # @@()
^@@      # @^(@@) => @@
@^(@@)   # @^(@@) => @@

# @->(count,
#     @-(1)
# )

#alias
@(var,@)

@(x,1)
assert(@==(1,x))

var(y,3)
assert(@==(3,y))

@@?(@F)
@==(@F,@@?(@F))
assert(@==(@F,@@?(@F)))

@@?(@T)
@==(@F,@@?(@T))
assert(@==(@F,@@?(@T)))

@(++(n),@+(1,n)),++(3), assert(@==( 4,++(3)))

#@(caar @L((a) car(car(a))))
#@(cadr @L((a) car(cdr(a))))
##  @(cadar @L(a() car(cdr(car(a)))))
#@(cdar @L(a() cdr(car(a))))
#@(cddr @L(a() cdr(cdr(a))))
#@(caddr @L(a() car(cdr(cdr(a)))))
#@(cdddr @L(a() cdr(cdr(cdr(a)))))
#@(cdadr @L(a() cdr(car(cdr(a)))))
#@(cadddr @L(a() car(cdr(cdr(cdr(a))))))

### @(caar(a),car(car(a)))
### @(cadr(a),car(cdr(a)))
### @(cdar(a),cdr(car(a)))
### @(cddr(a),cdr(cdr(a)))
### @(cadar(a),car(cdr(car(a))))
### #@(cadar(a),car(cdar(a))))
### @(caddr(a),car(cdr(cdr(a))))
### @(cdddr(a),cdr(cdr(cdr(a))))
### @(cdadr(a),cdr(car(cdr(a))))
### @(cdddr(a),car(cdr(cdr(cdr(a)))))


caar(((1,2),3))
assert(@==(1,caar(((1,2),3))))
cadr((1,2,3))
assert(@==(2,cadr((1,2,3))))

cdar(((1,2),3))
cadar(((1,2),3))
assert(@==(
2,cadar(((1,2),3))
))

@(sum_of_squares(num_list),
		@(sos_helper(remaining,sum_so_far),@?(@@?(remaining),sum_so_far,sos_helper(cdr(remaining),@+(sum_so_far,@*(car(remaining),car(remaining))))))
		sos_helper(num_list 0))

sum_of_squares(list(2 3 4) )           # 4+9+16=29

assert(@==(29,
sum_of_squares(list(2 3 4) )
))

sum_of_squares(^(1,2,3,4))
assert(@==(30,
sum_of_squares(^(1,2,3,4))
))

sum_of_squares((1,2,3,4))
assert(@==(30,
sum_of_squares((1,2,3,4))
))

# macros
#  @(procedure_body @L((proc) caddr(proc)))
#@(procedure_args @L(proc() cadr(proc)))
#@(mutate_procedure_env(name new_env) setcar(cdddr(name) new_env))
#@(mutate_procedure_body(name new_body) setcar(cddr(name) list(new_body)))
#@(mutate_procedure_args(name new_args) setcar(cdr(name) new_args))

# cons(^()) # cons(@^(nil())) => (nil())
# cons(^(),cons(^())) #cons(@^(nil()),cons(@^(nil()))) => (nil(),nil())
# cons(^(),cons(^(),cons(^()))) #ons(@^(nil()),cons(@^(nil()),cons(@^(nil())))) => (nil(),nil(),nil())
# cons(^@P,cons(^(),cons(^(),cons(^()))))

@(procedure_body(proc),caddr(proc))
#@(procedure_body,@L(proc,caddr(proc)))
@(procedure_args(proc),cadr(proc))
#@(procedure_args,@L(proc,cadr(proc)))
@(mutate_procedure_args(p,new_args),setcar(cdr(p),new_args))
@(mutate_procedure_body(p,new_body),setcar(cddr(p),list(new_body)))
@(mutate_procedure_ctx(p,new_ctx),setcar(cdddr(p),new_ctx))

#@(new_p(),cons(^@P,cons(^(),cons(^(),cons(^())))))
#@(new_env(),cons(cons(^() ^()) ^()))

#let(((x 2),(y 5)),@*(x y)) #10
#let((x(2),y(5)),@*(x y)) #10
#let((x(2),y(5)),@*(x y)) #10

let((x(2)),x) #2

# die: let(x,@*(a,a),x(3))

# KO, using @() cannot replace the let?
# 	@(construct_procedure1(args,body,ctx)
# 			@(np,@L((),cons(^@P,cons(^(),cons(^(),cons(^()))))))
# 			mutate_procedure_args(np,args)
# 			mutate_procedure_body(np,body)
# 			mutate_procedure_ctx(np,ctx)
# 			,np)
# 	@(new_func1,construct_procedure1(^x(),^cons(x,1),global()))
# 	print(new_func1)
# new_func1(6)

#let(np,cons(^@P,cons(^(),cons(^(),cons(^())))),np)

	@(construct_procedure(args,body,ctx)
			#let( np,cons(^@P,cons(^(),cons(^(),cons(^())))) #work
			let(
			#((
			np,cons(^@P,cons(^(),cons(^(),cons(^()))))
			#))
#@(np,cons(^@P,cons(^(),cons(^(),cons(^())))))
				mutate_procedure_args(np,args)
				mutate_procedure_body(np,body)
				mutate_procedure_ctx(np,ctx)
				np # return it
				)
	 )

# @(new_env(),cons(cons(^() ^()) ^()))
construct_procedure(^(a) ^cons(a 10) global())
#@(new_func,construct_procedure(^x(),^cons(x,11),global()))
@(new_func,construct_procedure(^x(),^cons(x,1),global()))
#@(new_func,construct_procedure(^(x),^@+(x,1),global()))
#@(new_func,construct_procedure(^(x),^(x,1),global()))
print(new_func)
new_func(5) #6
#@(nf(),new_func(5))

@(if_zero(x,then),list(@?,list(@== x 0),then))

@(with_macros,construct_procedure(^(x) if_zero(^x ^3) global()))
with_macros
with_macros()
with_macros(0) #3
with_macros(1)

# @(test1(),let((x(1)),@:=(x,2),x))
# test1()
# 
# @(test3(),@(x,2),@:=(x,@+(x,1)),@:=(x,@+(x,3)),x)
# test3()

# @(make_key_list()
# 		let((list(^())) 
# 			@(get_val @L(@() 
# 					assoc(var list)))
# 			@(add_key @L(@(val)
# 					@:=(list cons(cons(var val) list))))
# 			@(dispatch(m)
# 				@?(@==(m ^add) add_key
# 					@?(@==(m ^get) get_val 
# 						list)))
# 			dispatch))
# 
# 	@(make_stack()
# 			let((stack(^()))
# 				@(push @L(x() 
# 						@:=(stack cons(x stack))
# 						stack))
# 				@(pop @L(x()
# 						@(q car(stack))
# 						@:=(stack cdr(stack))
# 						q))
# 				@(dispatch(m)
# 					@?(@==(m ^push) push
# 						@?(@==(m ^pop) pop 
# 							stack)))
# 				dispatch))

exit()


exit()


with_macros()
list(2 3 4)

c_int("12345")

exit()

@(gen_accum(number)
  @L(amount()
    @:=(number @+(number amount))
    number))

# Everytime new_accum() is called, it's accumulator should be increased by one
@(new_accum gen_accum(0))

# Simple loop
@(for @L(start(end do)
    @(for_loop(a z)
      @?(@==(a z)
        ^Done;; Last iteration
        begin(
          do()
          for_loop(@+(1 a) z))))
    for_loop(start end do)))

@(make_withdraw(balance)
  @L(amount()
    @?(gt(balance amount)
      begin(@:=(balance @-(balance amount)),balance)
      "Insufficient funds")))

exit("OK")
