@(var,@)
@(nil,@@)
@(true,@T)
@(false,@F)
@(if,@?)
@(add,@+)
@(sub,@-)
@(mul,@*)
@(div,@/)
##@(eq,@=)
###@(cmp,@=)
@(vector,@V)

"English \"String\""
"English String"
"中文字串"
print("English String")
print("中文字串")

##@(die @L(s1() print(s1) ))
#@(die(s1) print(s1) exit())
@(die(s1) print(s1) exit())
##die("wtf")

@(ensure(r),@?(r,print(r),exit("ko")))
@(ensure(r),@?(r,print(r),print("ko")))

eq(@F is_nil(@F))
ensure(eq(@F is_nil(@F)) )

is_nil(@F)
is_nil(@T)
is_nil(@T)
is_nil(@F)
is_nil()
is_nil(@@)
@@()
is_nil(@@())

vector(2 3 4)
is_nil(cdr(vector(2 3 4) ))
list(2 3 4)
cdr(list(2 3 4) )

[2 3 4]
print([2 3 4])

(1 2)
1(2)

list(1 2)
vector(1 2)

#global()

load("lib.sao")

#print(global)
#global()

print("what is this")

eq(@?(1 @T @F),@F) #@F
eq(@?(0 @T @F),@F) #@T

#min((7 5 3 4 1 6) )
#max((4 5) )
##min_iter((3) (4) )
##min(list(4 5) )
##exit()
### TODO
range_from(1,5)
(1,2,3,4,5)
reverse((1,2,3,4,5))

range(5)
reverse(range(5))

reverse(reverse((1,2,3,4,5)))
reverse(range_from(1,5))
reverse(reverse(range_from(1,5)))

#pow(3,3) #27
mod(5,3) #2

#last_item_in_list((5,6,7,8))

car(list(4,5))                            # 4
caar(list(list(4,5),6) )                 # 4
cadar(list(list(4,5),6) )                # 5

@==(2 3)                                  # @F
@==(3 3)                                  # @T
@=(2 3)                                  # @F
nc(2 3)                               # @T

@=(3 3)                                  # @T
nc(3 3)                               # @F

lt(2,3) #@T
le(2,2) #@T

# TODO http://blog.zhengyi.one/fibonacci-in-logn.html
# https://blog.csdn.net/Hackbuteer1/article/details/6684867
#def Fibonacci_recursion_fast(n):
#    if n == 0:
#        return 0
#    if n == 1:
#        return 1
#    k = (n + 1) / 2 if n % 2 else n / 2
#    fib_k = Fibonacci_recursion_fast(k)
#    fib_k_1 = Fibonacci_recursion_fast(k - 1)
#    return fib_k**2 + fib_k_1**2 if n % 2 else (2 * fib_k_1 + fib_k) * fib_k
#@(ff(n),@?(cmp(n,0),0,@?(cmp(n,1),1,(@(k,(n + 1) / 2 if n % 2 else n / 2),fib_k,fib_k_1)))
@(fib(n),@?(lt(n,3),1,add(fib(sub(n,1)),fib(sub(n,2)))))
fib(11) #89

@(fibonacci(n),@?(lt(n,3),1,add(fibonacci(sub(n,1)),fibonacci(sub(n,2)))))
fibonacci(12)
@(fb(n),@?(lt(n,3),1,@+(fb(@-(n,1)),fb(@-(n,2)))))
fb(20)

@(factorial(n),@?(@=(n,0),1,mul(n,factorial(sub(n 1)))))
factorial(5)

@(x list(1 2 3))
#@(x ^1(2 3))

print(x) # output list(1 2 3)


#@(factorial @L(n() @?(@=(n 0) 1 mul(n factorial(sub(n 1))))))
@(factorial,@L(n(),@?(@=(n,0),1,mul(n,factorial(sub(n,1)))))) # n=>@?(@=(n 0) 1 mul(n factorial(sub(n 1))))
factorial(5) #120

@(factorial,@L((n),@?(@=(n,0),1,mul(n,factorial(sub(n,1)))))) # n=>@?(@=(n 0) 1 mul(n factorial(sub(n 1))))
factorial(5) #120

#@(add1 @L(n() add(1 n)))
@(add1 @L(n() add(1 n)))

add1(3)

@(sos_helper @L(remaining(sum_so_far)
      @?(is_nil(remaining) 
        sum_so_far 
        sos_helper(cdr(remaining) add(sum_so_far mul(car(remaining) car(remaining)))))))

@(sum_of_squares(num_list)
#  @(sos_helper @L(remaining(sum_so_far)
#      @?(is_nil(remaining) 
#        sum_so_far 
#        sos_helper(cdr(remaining) add(sum_so_far mul(car(remaining) car(remaining)))))))
  sos_helper(num_list 0))

# Procedure with no args
@(new_env() cons(cons(^() ^()) ^()))
# Construct a procedure with macro
@(new_func construct_procedure(^a() ^cons(a 10) global()))
@(with_macros construct_procedure(^x() if_zero(^x ^ZERO) global()))
new_func()
with_macros()
list(2 3 4)
sum_of_squares(list(2 3 4) )           # 4+9+16=29

c_int("12345")

#ffi("printf")(c.int(12345))

#c.pritnf(1234);
#c.int()
#c.double()


#exit()

