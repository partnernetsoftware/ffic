#########################################################################

var( caar lambda(a() car( car( a))))
var( cadr lambda(a() car( cdr( a))))
var( cdar lambda(a() cdr( car( a))))
var( cddr lambda(a() cdr( cdr( a))))
var( cadar lambda(a() car( cdr( car( a)))))
var( caddr lambda(a() car( cdr( cdr( a)))))
var( cdddr lambda(a() cdr( cdr( cdr( a)))))
var( cdadr lambda(a() cdr( car( cdr( a)))))
var( cadddr lambda(a() car( cdr( cdr( cdr( a))))))

#########################################################################
var( not lambda( a( b) if( cmp( a b) false true)))
var( gteq lambda( a( b) if( lt( a b) false true)))
var( lteq lambda( a( b) if( gt( a b) false true)))

# Return the maximum value from a list of integers
var( max( list-of-numbers)
  var( max-iter( best remaining)
    cond( (is_null( remaining) best)
      (gt( car( remaining) best) max-iter( car( remaining) cdr( remaining)))
      else( max-iter( best cdr( remaining)))))
  max-iter( car( list-of-numbers) cdr( list-of-numbers)))

# Return the minimum value from a list of integers
var( min( list-of-numbers)
  var( min-iter( best remaining)
    cond( (is_null( remaining) best)
      (lt( car( remaining) best) min-iter( car( remaining) cdr( remaining)))
      else( min-iter( best cdr( remaining)))))
  min-iter( car( list-of-numbers) cdr( list-of-numbers)))

# Map a function 'f' onto list 'a'
var( map lambda( f( a)
    if( is_null( a) 
      '()
      cons( f( car( a)) map( f cdr( a))))))

# Provide the association pair of key from list
var( assoc( key list)
  if( is_null( list)
    '()
    if( eq?( key car( car( list))) 
      car( list)
      assoc( key cdr( list)))))

# Lambda key-list with dispatch
var( make-key-list()
  let( (list( '())) 
    var( get-val lambda( var() 
        assoc( var list)))
    var( add-key lambda( var( val)
        set( list cons( cons( var val) list))))
    var( dispatch( m)
      if( eq?( m 'add) add-key
        if( eq?( m 'get) get-val 
          list)))
    dispatch))

# Lambda stack with dispatch
var( make-stack()
  let( (stack( '()))
    var( push lambda( x() 
        set( stack cons( x stack))
        stack))
    var( pop lambda( x()
        var( q car( stack))
        set( stack cdr( stack))
        q))
    var( dispatch( m)
      if( eq?( m 'push) push
        if( eq?( m 'pop) pop 
          stack)))
    dispatch))
# Returns the last item in a list or pair.
# Pointer to cdr if list, Pointer to object if pair
var( last-item-in-list lambda( list()
    var( helper( remaining)
      if( is_null( cdr( remaining))
        remaining
        helper( cdr( remaining))))
    helper( list)))

# Returns a list from 0-number()
var( range( number) 
  var( range-helper( start max)
    if( cmp( start max)
      cons( max '())
      cons( start range-helper( add( 1 start) max))))
  range-helper( 0 number))

# Returns a list from 0-number()
var( range-from( start finish)
  if( cmp( start finish)
    finish
    cons( start range-from( add( 1 start) finish))))

# Tail recursive length
var( length( list)
  var( length-helper( accum remaining)
    if( is_null( remaining)
      accum
      length-helper( add( 1 accum) cdr( remaining))))
  length-helper( 1 cdr( list)))

# Append list2 to list1
var( append lambda( list1( list2) 
    var( append-helper( l1 l2)
      if( is_null( l1)
        l2
        cons( car( l1) append-helper( cdr( l1) l2))))
    append-helper( list1 list2)))

# Reverse list
var( reverse( list)
  var( reverse-iter( remaining first) 
    if( is_null( remaining)
      first
      reverse-iter( cdr( remaining) cons( car( remaining) first))))
  reverse-iter( list '()))

var( pow( num exp) 
  var( iter( a b) 
    if( eq?( b 1) 
      a
      iter( mul( a num) sub( b 1))))
  if( eq?( exp 0)
    1
    iter( num exp)))

var( gteq( a b)
  if( lt( a b) false true))

var( lteq( a b) 
  if( gt( a b) false true))

var( ge gteq)
var( le lteq)

var( mod( a b)
  var( iter( rem div)
    if( lt( rem div)
      rem
      iter( sub( rem div) div)))
  iter( a b))

# A couple macros
# Because this is LISP and we can...
var( procedure-body lambda( proc() caddr( proc)))
var( procedure-args lambda( proc() cadr( proc)))
var( mutate-procedure-env( name new-env) setcar( cdddr( name) new-env))
var( mutate-procedure-body( name new-body) setcar( cddr( name) list( new-body)))
var( mutate-procedure-args( name new-args) setcar( cdr( name) new-args))

var( construct-procedure( args body env)
  let( (new-proc( cons( 'procedure cons( '() cons( '() cons( '()))))))
    mutate-procedure-args( new-proc args)
    mutate-procedure-body( new-proc body)
    mutate-procedure-env( new-proc env)
    new-proc))

var( if-zero( x then) list( 'if list( '= x 0) then))

var( gen-accum( number)
  lambda( amount()
    set( number add( number amount))
    number))

# Everytime new-accum() is called, it's accumulator should be increased by one
var( new-accum gen-accum( 0))

# Simple for loop
var( for lambda( start( end do)
    var( for-loop( a z)
      if( cmp( a z)
        'Done;; Last iteration
        begin( 
          do()
          for-loop( add( 1 a) z))))
    for-loop( start end do)))

var( make-withdraw( balance)
  lambda( amount()
    if( gt( balance amount)
      begin( set( balance sub( balance amount))
        balance)
      "Insufficient funds")))

# Various tests
var( x '1( 2 3))
var( factorial lambda(n() if( cmp( n 0) 1 mul( n factorial( sub( n 1))))))
var( add1 lambda(n() add( 1 n)))
var( sum-of-squares( num-list)
  var( sos-helper lambda( remaining( sum-so-far)
      if( is_null( remaining) 
        sum-so-far 
        sos-helper( cdr( remaining) add( sum-so-far mul( car( remaining) car( remaining)))))))
  sos-helper( num-list 0))

# Procedure with no args
var( new-env() cons( cons( '() '()) '()))
# Construct a procedure with macro
var( new-func construct-procedure( 'a() 'cons( a 10) global()))
var( with-macros construct-procedure( 'x() if-zero( 'x 'ZERO) global()))

var(
	fib(n),if(lt(n,3),1,add(fib(sub(n,1)),fib(sub(n,2))))
)
#exit()

sum-of-squares( list(1 2 3 4) )

c_int("12345")
#ffi("printf")(c.int(12345))

#c.pritnf(1234);
#c.int()
#c.double()
fib(12)
