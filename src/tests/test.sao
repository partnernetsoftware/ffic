##var(die lambda( s1() print(s1) ))
var(die(s1) print(s1) exit())
##die("wtf")

var(ensure(r) if(r print(r) exit("ko") ))

is_null(false)
eq(false is_null(false))
ensure( eq(false is_null(false)) )

is_null(true)
is_null()
vector(2 3 4)
is_null(cdr( vector(2 3 4) ))
list(2 3 4)
cdr( list(2 3 4) )
[2 3 4]
cdr( [2 3 4] )

print([2 3 4])

(1 2)
1(2)

list(1 2)
vector(1 2)
[1 2]

#global()

load("lib.sao")

#print(global)
#global()

print("what is this")

eq(if(1 true false),false) #false
eq(if(0 true false),false) #true

# TODO
range(5)

[6,7,8]

print([4,5])                            # 4

car(list(4,5))                            # 4
#car([4,5])                            # 4
#car(4,5)                            # 4
caar( list(list(4,5),6) )                 # 4
#caar( [[4,5],6] )                 # 4
#caar( (4,5),6 )                 # 4
cadar( list(list(4,5),6) )                # 5
#cadar( ((4,5),6) )                # 5

cmp(2 3)                                  # false
nc(2 3)                               # true

cmp(3 3)                                  # true
nc(3 3)                               # false

lt(2,3) #true
le(2,2) #true

var (
	fib(n),if(lt(n,3),1,add(fib(sub(n,1)),fib(sub(n,2))))
)
fib(12)                                   # 144


var( x list(1 2 3))
#var( x ^1( 2 3))
#var( x ^[1 2 3])

print(x) # output list(1 2 3)

#var(factorial(n) if( cmp( n 0) 1 mul( n factorial( sub( n 1))))
var( factorial lambda(n() if( cmp( n 0) 1 mul( n factorial( sub( n 1))))))

#var( add1 lambda(n() add( 1 n)))
var(add1 lambda(n() add(1 n)))

add1(3)

var( sos_helper lambda( remaining(sum_so_far)
      if( is_null( remaining) 
        sum_so_far 
        sos_helper( cdr( remaining) add( sum_so_far mul( car( remaining) car( remaining)))))))

var( sum_of_squares( num_list)
#  var( sos_helper lambda( remaining( sum_so_far)
#      if( is_null( remaining) 
#        sum_so_far 
#        sos_helper( cdr( remaining) add( sum_so_far mul( car( remaining) car( remaining)))))))
  sos_helper( num_list 0))

# Procedure with no args
var( new_env() cons( cons( ^() ^()) ^()))
# Construct a procedure with macro
var( new_func construct_procedure( ^a() ^cons( a 10) global()))
var( with_macros construct_procedure( ^x() if_zero( ^x ^ZERO) global()))
list(2 3 4)
sum_of_squares( list(2 3 4) )           # 4+9+16=29
#sum_of_squares( [2 3 4] )           # 30

c_int("12345")

#ffi("printf")(c.int(12345))

#c.pritnf(1234);
#c.int()
#c.double()


#exit()

